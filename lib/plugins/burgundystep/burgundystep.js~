/*

    # How to Exploit #########################################################################################################
    #                                                                                                                        #
    #   use $("#myElements").BurgundyStep(options);   to Initiate the BurgundyStep Plugin for #myElements                    #
    #   options include information for every new Step that user creates by clicking on the add new Step button, such as :   #
    #       {                                                                                                                #
    #           title: "the DEFAULT title appearing on every new Step user adds until user changes it",                      #
    #           stepcontent: "the DEFAULT step content that would show up on every new step user adds",                      #
    #           addcallback: function(){                                                                                     #
    #               // this is the callback function that would execute Every time user adds a new step                      #
    #           }                                                                                                            #
    #           removecallback: function(element){                                                                           #
    #               // this is the callback function that would execute BEFORE everytime user deletes a tab                  #
    #               // element is the STEP (not the tab) being deleted (element is a JQUERY element )                        #
    #           }                                                                                                            #
    #       }                                                                                                                #
    #                                                                                                                        #
    #   ******************************************************************************************************************   #
    #                                                                                                                        #
    #   Once you've already Initiated #myElements as a BurgundyStep element just like illustrated above,                     #
    #   use $("#myElements").BurgundyStep("add", options);  to add a new Step with your own desired content                  #
    #   options include information for the new Step, such as:                                                               #
    #       {                                                                                                                #
    #           title: "the title appearing on the new Step until user changes it",                                          #
    #           stepcontent: "the step content that would show up on the new step",                                          #
    #           addcallback: function(){                                                                                     #
    #               // this is the callback function that would execute Once the new step is added                           #
    #           }                                                                                                            #
    #       }                                                                                                                #
    #                                                                                                                        #
    ##########################################################################################################################


*/





// the semi-colon before the function invocation is a safety
// net against concatenated scripts and/or other plugins
// that are not closed properly.
;(function ( $, window, document, undefined ) {

    // undefined is used here as the undefined global
    // variable in ECMAScript 3 and is mutable (i.e. it can
    // be changed by someone else). undefined isn't really
    // being passed in so we can ensure that its value is
    // truly undefined. In ES5, undefined can no longer be
    // modified.

    // window and document are passed through as local
    // variables rather than as globals, because this (slightly)
    // quickens the resolution process and can be more
    // efficiently minified (especially when both are
    // regularly referenced in your plugin).

    // Create the defaults once
    var BurgundyStepVars = "BurgundyStep",
        defaults = {
            title: "Item",
            stepcontent: "Here is the Step Content",
            addcallback: function(){},
            removecallback: function(){},
            specialbutton: false,
            specialbuttoncallback: function(tab){}
        };

    // The actual plugin constructor
    function BurgundyStep( element, options ) {
        this.element = element;
        // jQuery has an extend method that merges the
        // contents of two or more objects, storing the
        // result in the first object. The first object
        // is generally empty because we don't want to alter
        // the default options for future instances of the plugin
        this.options = $.extend( {}, defaults, options) ;

        this._defaults = defaults;
        this._name = BurgundyStepVars;

        this.init();
    }

    BurgundyStep.prototype = {

        init: function() {
            // Place initialization logic here
            // You already have access to the DOM element and
            // the options via the instance, e.g. this.element
            // and this.options
            // you can add more functions like the one below and
            // call them like so: this.yourOtherFunction(this.element, this.options).
            $(this.element).append("\
                <div class='step'>\
                    <ul class='nav nav-tabs nav-justified' role='tablist' style='overflow-x:auto;' >\
                        <li role='step' class='step-success' >\
                            <a href='#step' role='tab' class='AddNewStepButton'>\
                                <div class='glyphicon glyphicon-plus'></div>\
                                <div class='step-title'>\
                                    <div class='title'>Add "+this.options.title+"</div>\
                                    <div class='description'></div>\
                                </div>\
                            </a>\
                        </li>\
                    </ul>\
                    <div class='tab-content'>\
                    </div>\
                </div>\
                ");
            var el=this.element;
            $(this.element).find("div.step .AddNewStepButton").click(function(){
                $.data(el,"plugin_BurgundyStep").defaultadd();
            });

            $("head").append("\
                <style>\
                    div.step >ul >li:not(active) >a >i{\
                        cursor: no-drop;\
                    }\
                    div.step >ul >li.active >a >i{\
                        cursor: pointer;\
                    }\
                    div.step >ul >li.active >a >i:hover{\
                        color: red;\
                    }\
                </style>\
            ;")
        },

        defaultadd: function(el, options) {
            var i=0;
            $(this.element).find("li[role=step]").each(function(){
                i++;
            });
            i++;
            var NewStepTab="\
                <li role='step' style='display:none;'>\
                    <a href='#step"+i+"' id='step"+i+"-tab' role='tab' data-toggle='tab' aria-controls='home' aria-expanded='true'>\
                        <i class='icon fa fa-trash RemoveStep' ></i>\
                        "+(this.options.specialbutton?"<i class='icon fa fa-check-circle HeadingStep' ></i>":"")+"\
                        <div class='step-title'>\
                            <div class='title'>New "+this.options.title+"</div>\
                            <div class='description'>Edit</div>\
                        </div>\
                    </a>\
                </li>\
            ";
            $(this.element).find("ul[role=tablist]").append(NewStepTab);
            $(this.element).find("ul[role=tablist] li:last").fadeIn();

            var el=this.element;
            $(this.element).find("ul[role=tablist] li:last .RemoveStep").click(function(){
                $.data(el,"plugin_BurgundyStep").remove($(this).closest("li[role=step]"));
            });
	
            if(this.options.specialbutton)
	            $(this.element).find("ul[role=tablist] li:last .HeadingStep").click(function(){
	                $.data(el,"plugin_BurgundyStep").remove($(this).closest("li[role=step]"));
	            });


            var NewStepContent="\
                <div role='tabpanel' class='tab-pane fade in' id='step"+i+"' aria-labelledby='home-tab'>\
                "+this.options.stepcontent+"\
                </div>\
            ";
            $(this.element).find("div.tab-content").append(NewStepContent);

            if(this.options.addcallback)
                this.options.addcallback();
        },

        add: function( options){
            NewStepContent= options.stepcontent;
            newaddcallback= options.addcallback;

            var i=0;
            $(this.element).find("li[role=step]").each(function(){
                i++;
            });
            i++;
            var NewStepTab="\
                <li role='step' style='display:none;'>\
                    <a href='#step"+i+"' id='step"+i+"-tab' role='tab' data-toggle='tab' aria-controls='home' aria-expanded='true'>\
                        <i class='icon fa fa-trash RemoveStep' ></i>\
                        "+(this.options.specialbutton?"<i class='icon fa fa-check-circle HeadingStep' ></i>":"")+"\
                        <div class='step-title'>\
                            <div class='title'>"+options.title+"</div>\
                            <div class='description'>Edit</div>\
                        </div>\
                    </a>\
                </li>\
            ";
            $(this.element).find("ul[role=tablist]").append(NewStepTab);
            $(this.element).find("ul[role=tablist] li:last").fadeIn();

            var el=this.element;
            $(this.element).find("ul[role=tablist] li:last .RemoveStep").click(function(){
                $.data(el,"plugin_BurgundyStep").remove($(this).closest("li[role=step]"));
            });

            if(this.options.specialbutton)
		$(this.element).find("ul[role=tablist] li:last .HeadingStep").click(function(){
			$(this).closest("li[role=step]").css("background-color:blue");
			if(typeof this.options.specialbuttoncallback=="function")
				this.options.specialbuttoncallback($(this).closest("li[role=step]"));
		});

            var Content="\
                <div role='tabpanel' class='tab-pane fade in' id='step"+i+"' aria-labelledby='home-tab'>\
                "+NewStepContent+"\
                </div>\
            ";
            $(this.element).find("div.tab-content").append(Content);

            if(newaddcallback)
                newaddcallback();
            else if(this.options.addcallback)
                this.options.addcallback();

        },

        remove: function(tab){
            if(tab.hasClass("active")){
                if(!window.confirm("Are You Sure to Delete '"+tab.find(".step-title .title").html()+"' ?"))return;
                this.options.removecallback($(tab.find("a").attr('href')));
                $(tab.find("a").attr('href')).remove();
                tab.remove();
            }
        }
    };

    $.fn["BurgundyStep"] = function ( arg1, arg2 ) {
        return this.each(function () {
            if(typeof arg1== "string" && $.data(this, "plugin_BurgundyStep")){// this is a call to a Method of an Existing BurgundyStep Obj
                switch(arg1.toLowerCase()){ // List of All Public Methods
                    case 'add':
                        if(typeof arg2== undefined){
                            options=null;
                        }else if(typeof arg2 == "object"){
                            options=arg2;
                        }
                        $.data(this, "plugin_BurgundyStep").add(options);
                        break;
                }
            }else if(!$.data(this, "plugin_BurgundyStep")){ // Creating a New BurgundyStep
                var options;
                if(typeof arg1== undefined){
                    options=null;
                }else if(typeof arg1=="object"){
                    options=arg1;
                }
                $.data(this, "plugin_BurgundyStep",
                new BurgundyStep( this, options ));
            }
        });
    };

})( jQuery, window, document );
